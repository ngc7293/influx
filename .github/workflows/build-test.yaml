name: Build, test and package

on:
  push:
  schedule:
    - cron: '0 0 * * 0'

jobs:
  build-package:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    strategy:
      matrix:
        config:
          - {
              name: Windows MSVC,
              os: windows-2022,
              build_type: Release,
              cc: cl,
              cxx: cl,
              generator: Visual Studio 17 2022,
            }
          - {
              name: Ubuntu GCC,
              os: ubuntu-20.04,
              build_type: Release,
              cc: gcc-10,
              cxx: g++-10,
              generator: Unix Makefiles,
            }
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          submodules: true

      - name: Install Conan
        run: |
          pip install conan
          conan config set general.revisions_enabled=1
          conan remote add davidbourgault https://artifactory.davidbourgault.ca/artifactory/api/conan/conan
          conan user -p ${{ secrets.CONAN_PASSWORD }} -r davidbourgault david

      - name: Create directories
        run: mkdir build

      - name: Install Third Parties (Ubuntu)
        if: matrix.config.os == 'ubuntu-20.04'
        working-directory: build
        run: conan install .. --update --build=missing -s compiler.version=10 -s compiler.libcxx=libstdc++11 -s build_type=${{ matrix.config.build_type }} -r davidbourgault

      - name: Install Third Parties (Windows)
        if: matrix.config.os == 'windows-2022'
        working-directory: build
        run: conan install .. --update --build=missing -s compiler="Visual Studio" -s compiler.version=17 -s build_type=${{ matrix.config.build_type }} -r davidbourgault

      - name: Upload
        run: conan upload '*' --remote davidbourgault --all --confirm

      - name: Configure
        working-directory: build
        env:
          CC: ${{matrix.config.cc}}
          CXX: ${{matrix.config.cxx}}
        run: cmake .. -G "${{ matrix.config.generator }}" -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -DCMAKE_INSTALL_PREFIX=/usr

      - name: Build
        working-directory: build
        run: cmake --build . --config ${{ matrix.config.build_type }} --parallel 2

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: build/bin/*
          retention-days: 5

      - name: Test without API
        if: matrix.config.os == 'windows-2022'
        working-directory: build
        run: bin/influx.test --gtest_filter='-InfluxTest*:BucketTest*:InitInfluxTest*'  # These tests require a functional Influx

      - name: Pull Influx image
        if: matrix.config.os == 'ubuntu-20.04'
        working-directory: build
        run: |
          docker pull influxdb:latest
          docker create -p 8086:8086 --name influx influxdb:latest
          docker start influx
          until curl -s http://localhost:8086/health; do sleep 1; done

      - name: Install Influx client
        if: matrix.config.os == 'ubuntu-20.04'
        run: |
          export INFLUXDB_VERSION=$(curl --silent "https://api.github.com/repos/influxdata/influx-cli/releases" | jq -r '. | sort_by(.tag_name) | reverse[] | .tag_name' | sed -e 's/v//g' | head -n 1)
          export INFLUXDB_DOWNLOAD_PATH="https://dl.influxdata.com/influxdb/releases"
          wget -q $INFLUXDB_DOWNLOAD_PATH/influxdb2-client-$INFLUXDB_VERSION-linux-amd64.tar.gz
          tar xvfz influxdb2-client-$INFLUXDB_VERSION-linux-amd64.tar.gz
          sudo cp influxdb2-client-$INFLUXDB_VERSION-linux-amd64/influx /usr/local/bin/
          rm -r influxdb2-client-$INFLUXDB_VERSION-linux-amd64/

      - name: Setup InfluxDB
        if: matrix.config.os == 'ubuntu-20.04'
        working-directory: build
        run: |
          influx setup --host http://localhost:8086 -f -o test -u test -p DummyPassword0 -b dummy -t dummy
          export INFLUX_ORG_ID=$(influx bucket delete -n dummy -o test -t dummy --json | jq -r .orgID)
          echo "{\"host\": \"http://localhost:8086\", \"org\": \"${INFLUX_ORG_ID}\", \"token\": \"dummy\"}" > test.config.json

      - name: Test with API
        if: matrix.config.os == 'ubuntu-20.04'
        working-directory: build
        run: bin/influx.test
